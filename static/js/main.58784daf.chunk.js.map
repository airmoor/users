{"version":3,"sources":["components/Users.js","components/Login.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","maxWidth","borderRadius","margin","padding","boxShadow","background","color","Users","token","classes","useState","users","filtredUsers","isLoaded","error","searchText","sortFromLess","values","setValues","useEffect","axios","get","headers","then","response","console","log","data","catch","Card","className","Box","alignItems","FormControl","InputLabel","size","htmlFor","Input","white","id","value","onChange","event","search","target","toLowerCase","filter","user","username","includes","endAdornment","InputAdornment","position","IconButton","aria-label","labelWidth","onClick","sort","a","b","reverse","List","map","ListItem","key","ListItemIcon","is_superuser","ListItemText","primary","Typography","secondary","first_name","last_name","Login","password","handleChange","name","CardContent","variant","align","TextField","fullWidth","type","label","component","CardActions","Button","undefined","post","theme","createMuiTheme","palette","light","indigo","main","dark","success","App","ThemeProvider","display","flexWrap","justifyContent","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uaAOMA,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,IACVC,SAAU,IACVC,aAAa,GACbC,OAAQ,GACRC,QAAS,YACTC,UAAW,iCACXC,WAAW,UACXC,MAAM,UAIG,SAASC,EAAT,GAAyB,IAATC,EAAQ,EAARA,MACrBC,EAAUb,IADmB,EAEPc,mBAAS,CACjCC,MAAO,GACPC,aAAc,GACdC,UAAU,EACVC,MAAO,GACPC,WAAY,GACZC,cAAc,IARiB,mBAE5BC,EAF4B,KAEpBC,EAFoB,KAWnCC,qBAAW,WACPC,IAAMC,IAAI,+DAAgE,CACtEC,QAAQ,CACJ,cAAgB,SAAhB,OAAyBd,MAGhCe,MAAK,SAACC,GACHC,QAAQC,IAAI,UAAUF,GACtBN,EAAU,eAAID,EAAL,CAAaH,MAAM,GAAID,UAAS,EAAMF,MAAMa,EAASG,KAAMf,aAAaY,EAASG,WAE7FC,OAAM,SAACd,GACJW,QAAQC,IAAI,QAAQZ,GACpBI,EAAU,eAAID,EAAL,CAAaH,MAAMA,EAAOD,UAAS,UAEjD,IAgBH,OACI,kBAACgB,EAAA,EAAD,CAAMC,UAAWrB,EAAQX,MACrB,kBAACiC,EAAA,EAAD,CAAKC,WAAW,YACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,SAASC,QAAQ,SAAS9B,MAAM,QAAjD,sBACA,kBAAC+B,EAAA,EAAD,CAAQP,UAAWrB,EAAQ6B,MACvBC,GAAG,SACHC,MAAOvB,EAAOF,WACd0B,SAtBD,SAACC,GAChB,IAAMC,EAASD,EAAME,OAAOJ,MAAMK,cAC9BjC,EAAeK,EAAON,MAAMmC,QAAO,SAAAC,GACnC,OAAOA,EAAKC,SAASH,cAAcI,SAASN,MAEhDzB,EAAU,eAAID,EAAL,CAAaL,aAAaA,EAAcG,WAAW2B,EAAME,OAAOJ,UAkBzDU,aACA,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACrB,kBAACC,EAAA,EAAD,CAAYC,aAAW,UACnB,kBAAC,IAAD,QAIRC,WAAY,MAGpB,kBAACF,EAAA,EAAD,CAAYC,aAAW,OAAOE,QAzB7B,WACT,IAAI5C,EAAeK,EAAOL,aAAa6C,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEnB,GAAKoB,EAAEpB,MACzDtB,EAAOD,cAAcJ,EAAagD,UACvC1C,EAAU,eAAID,EAAL,CAAaL,aAAaA,EAAcI,cAAcC,EAAOD,kBAuB1D,kBAAC,IAAD,QAIR,kBAAC6C,EAAA,EAAD,KACK5C,EAAOL,aAAakD,KAAK,SAAAf,GAAI,OAC1B,kBAACgB,EAAA,EAAD,CAAUC,IAAKjB,EAAKR,GAAIP,WAAW,cAC/B,kBAACiC,EAAA,EAAD,KACA,kBAAC,IAAD,CAAmB3D,MAAOyC,EAAKmB,aAAc,YAAa,aAE9D,kBAACC,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,KAActB,EAAKR,GAAnB,KAAyBQ,EAAKC,SAA9B,KAEJsB,UACI,kBAACD,EAAA,EAAD,CAAY/D,MAAM,iBAAiByC,EAAKwB,WAAxC,IAAqDxB,EAAKyB,mBC3FtF,IAAM5E,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,IACVC,SAAU,IACVC,aAAa,GACbC,OAAQ,IACRC,QAAS,YACTC,UAAW,iCACXC,WAAW,UACXC,MAAM,QAERgE,UAAW,CACPhE,MAAM,WAEVgC,MAAO,CACHhC,MAAM,UAKC,SAASmE,IACpB,IAAMhE,EAAUb,IADY,EAEAc,mBAAS,CACjCsC,SAAU,GACV0B,SAAU,GACV5D,MAAO,GACPN,MAAO,KANiB,mBAErBS,EAFqB,KAEbC,EAFa,KAStByD,EAAe,SAAAC,GAAI,OAAI,SAAAlC,GACzBxB,EAAU,eAAID,EAAL,eAAc2D,EAAOlC,EAAME,OAAOJ,WAyB/C,OACI,qCACEvB,EAAOT,OACT,kBAACqB,EAAA,EAAD,CAAMC,UAAWrB,EAAQX,MACrB,kBAAC+E,EAAA,EAAD,KACI,kBAACR,EAAA,EAAD,CAAYS,QAAQ,KAAKC,MAAM,UAA/B,YACA,kBAACC,EAAA,EAAD,CAAWzC,GAAG,WAAW0C,WAAS,EAACC,KAAK,WAAWC,MAAM,WAAWjF,OAAO,SACvEsC,MAAOvB,EAAO+B,SAAUP,SAAUkC,EAAa,cAHvD,IAGsE,6BAClE,kBAACK,EAAA,EAAD,CAAWzC,GAAG,WAAW0C,WAAS,EAACC,KAAK,WAAWC,MAAM,WAAWjF,OAAO,SACvEsC,MAAOvB,EAAOyD,SAAUjC,SAAUkC,EAAa,cALvD,IAKsE,6BAE9D1D,EAAOH,OACP,kBAACuD,EAAA,EAAD,CAAYe,UAAU,IAAI9E,MAAM,OAAOyE,MAAM,UACxC9D,EAAOH,QAIpB,kBAACuE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQhF,MAAM,UAAUwE,QAAQ,YAAYG,WAAS,EAACzB,QAxC9C,WAChB,IAAMT,EAAO,CACTC,SAAU/B,EAAO+B,eAAYuC,EAC7Bb,SAAUzD,EAAOyD,eAAYa,GAGjCnE,IAAMoE,KAAK,iEAAkEzC,GAC5ExB,MAAK,SAACC,GACEA,GAGDN,EAAU,eAAID,EAAL,CAAaH,MAAM,GAAIN,MAAMgB,EAASG,KAAKnB,SACpDiB,QAAQC,IAAI,QAAQT,EAAOT,OAC3BiB,QAAQC,IAAI,gBAJZD,QAAQC,IAAI,cAOnBE,OAAM,SAACd,GACJI,EAAU,eAAID,EAAL,CAAaH,MAAM,oBAC5BW,QAAQC,IAAI,iBAAiBZ,QAsBzB,YAKJG,EAAOT,OACH,kBAACD,EAAD,CAAOC,MAAOS,EAAOT,S,6BClEtBiF,EAhBAC,YAAe,CAC5BC,QAAS,CACPvB,QAAS,CACPwB,MAAOC,IAAO,KACdC,KAAMD,IAAO,KACbE,KAAMF,IAAO,MAEfvB,UAAW,CACTwB,KAAM,WAERE,QAAS,CACPF,KAAMD,IAAO,SCIJI,MAXf,WACE,OACI,kBAACC,EAAA,EAAD,CAAeT,MAAOA,GACpB,kBAAC1D,EAAA,EAAD,CAAKoE,QAAQ,OAAOC,SAAS,SAASC,eAAe,SAASrE,WAAW,UACvE,kBAACsE,EAAA,EAAD,MACA,kBAAC7B,EAAD,S,OCCU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5F,MAAK,SAAA6F,GACJA,EAAaC,gBAEdzF,OAAM,SAAAd,GACLW,QAAQX,MAAMA,EAAMwG,a","file":"static/js/main.58784daf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, List, ListItem, ListItemText, Typography, ListItemIcon, FormControl, InputLabel, IconButton, InputAdornment, Input, makeStyles, Box } from '@material-ui/core';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 350,\r\n      maxWidth: 500,\r\n      borderRadius:10,\r\n      margin: 50,\r\n      padding: '30px 30px',\r\n      boxShadow: '0 20px 50px  rgba(0, 0, 0, .3)',\r\n      background:'#b0a4ff',\r\n      color:\"#000\",\r\n    }\r\n  });\r\n\r\nexport default function Users({token}) {\r\n    const classes = useStyles();\r\n    const [values, setValues] = useState({\r\n        users: [],\r\n        filtredUsers: [],\r\n        isLoaded: false,\r\n        error: '',\r\n        searchText: '',\r\n        sortFromLess: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        axios.get('http://emphasoft-test-assignment.herokuapp.com/api/v1/users/', {\r\n            headers:{\r\n                'Authorization':`Token ${token}`\r\n            }\r\n        })\r\n        .then((response)=> {\r\n            console.log('success',response)\r\n            setValues({...values, error:'', isLoaded:true, users:response.data, filtredUsers:response.data})\r\n        })\r\n        .catch((error)=> {\r\n            console.log('error',error)\r\n            setValues({...values, error:error, isLoaded:true})\r\n        })\r\n    }, [])\r\n\r\n    const dataSearch = (event) => {\r\n        const search = event.target.value.toLowerCase();\r\n        let filtredUsers = values.users.filter(user=> {\r\n            return user.username.toLowerCase().includes(search)\r\n        })\r\n        setValues({...values, filtredUsers:filtredUsers, searchText:event.target.value})\r\n    }\r\n\r\n    const sort = () => {\r\n        let filtredUsers = values.filtredUsers.sort((a,b) => a.id - b.id);\r\n        if (!values.sortFromLess) filtredUsers.reverse()\r\n        setValues({...values, filtredUsers:filtredUsers, sortFromLess:!values.sortFromLess })\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <Box alignItems='flex-end'>\r\n                <FormControl>\r\n                    <InputLabel size='normal' htmlFor=\"search\" color='#fff'>Search by username</InputLabel>\r\n                    <Input  className={classes.white}\r\n                        id=\"search\"\r\n                        value={values.searchText}\r\n                        onChange={dataSearch}\r\n                        endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton aria-label=\"search\">\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                    />\r\n                </FormControl>\r\n                <IconButton aria-label=\"sort\" onClick={sort}>\r\n                    <SortIcon />\r\n                </IconButton>\r\n            </Box>\r\n\r\n            <List>\r\n                {values.filtredUsers.map( user => (\r\n                    <ListItem key={user.id} alignItems='flex-start'>\r\n                        <ListItemIcon>\r\n                        <AccountCircleIcon color={user.is_superuser? 'secondary': 'primary'}/>\r\n                        </ListItemIcon> \r\n                    <ListItemText\r\n                        primary = {\r\n                            <Typography >{user.id}: {user.username} </Typography>                         \r\n                        }\r\n                        secondary = {\r\n                            <Typography color='textSecondary'>{user.first_name} {user.last_name}</Typography> \r\n                        }\r\n                        /> \r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport {Card, CardContent, Typography, TextField, Button, CardActions, makeStyles} from '@material-ui/core'\r\nimport axios from 'axios';\r\nimport Users from './Users';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 350,\r\n      maxWidth: 500,\r\n      borderRadius:10,\r\n      margin: 100,\r\n      padding: '30px 30px',\r\n      boxShadow: '0 20px 50px  rgba(0, 0, 0, .3)',\r\n      background:'#b0a4ff',\r\n      color:'#fff',\r\n    },\r\n    secondary: {\r\n        color:\"#c2c2ff\"\r\n    },\r\n    white: {\r\n        color:\"#fff\"\r\n    }\r\n  });\r\n\r\n\r\nexport default function Login() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = useState({\r\n        username: '',\r\n        password: '',\r\n        error: '',\r\n        token: ''\r\n    })\r\n\r\n    const handleChange = name => event => {\r\n        setValues({...values, [name]: event.target.value })\r\n    }\r\n\r\n    const clickSubmit = () => {\r\n        const user = {\r\n            username: values.username || undefined,\r\n            password: values.password || undefined\r\n        }\r\n\r\n        axios.post('http://emphasoft-test-assignment.herokuapp.com/api-token-auth/', user)\r\n        .then((response)=> {\r\n            if (!response) {\r\n                console.log('no data')\r\n            } else {\r\n                setValues({...values, error:'', token:response.data.token})\r\n                console.log('token',values.token)\r\n                console.log('signin good')\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            setValues({...values, error:'incorrect user'})\r\n            console.log('incorrect user',error)\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        {!values.token && (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant='h4' align='center'> Sign In</Typography>\r\n                <TextField id='username' fullWidth type='username' label='Username' margin='normal'\r\n                    value={values.username} onChange={handleChange('username')}/> <br/>\r\n                <TextField id='password' fullWidth type='password' label='Password' margin='normal'\r\n                    value={values.password} onChange={handleChange('password')}/> <br/>\r\n                {\r\n                    values.error && (\r\n                    <Typography component='p' color='info' align='center'>\r\n                        {values.error}\r\n                    </Typography>)\r\n                }    \r\n            </CardContent>\r\n            <CardActions>\r\n                <Button color='primary' variant='contained' fullWidth onClick={clickSubmit}>Submit</Button>\r\n            </CardActions>\r\n        </Card>\r\n        )}\r\n        {\r\n            values.token && (\r\n                <Users token={values.token}/>\r\n            )\r\n        }\r\n        </>\r\n    ) \r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\n const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: indigo[400],\r\n      main: indigo[500],\r\n      dark: indigo[600]\r\n    },\r\n    secondary: {\r\n      main: '#c8ccff'\r\n    },\r\n    success: {\r\n      main: indigo[200]\r\n    }\r\n  },  \r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport {Box, ThemeProvider, CssBaseline} from '@material-ui/core'\nimport Login from './components/Login';\nimport theme from './theme';\n \n\nfunction App() {\n  return (\n      <ThemeProvider theme={theme}>\n        <Box display='flex' flexWrap='nowrap' justifyContent='center' alignItems='center'>\n          <CssBaseline />\n          <Login/>\n        </Box>\n      </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}